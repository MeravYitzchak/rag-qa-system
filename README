# RAG QA System

A simple Retrieval-Augmented Generation (RAG) system for document-based question answering.

## ðŸ§  What It Does
You can ask natural language questions about a collection of text documents, and the system will find relevant parts and answer them using a QA model.

## ðŸš€ Setup
pip install sentence-transformers
pip install faiss-cpu
pip install llama-cpp-python
pip install tf-keras
pip install torch
pip install transformers
CMD -> huggingface-cli download TheBloke/Mistral-7B-Instruct-v0.1-GGUF mistral-7b-instruct-v0.1.Q4_K_M.gguf --local-dir . --local-dir-use-symlinks False


rag-qa-system/
â”‚
â”œâ”€â”€ documents/                # Input .txt files
â”œâ”€â”€ processed_documents.json  # Chunked and cleaned output
â”œâ”€â”€ embeddings.pkl            # Saved embeddings and metadata
â”œâ”€â”€ faiss_index.bin           # Vector store
â”œâ”€â”€ preprocess.py             # Step 1: Clean and chunk docs
â”œâ”€â”€ build_faiss_index.py      # Step 2: Generate embeddings and index
â”œâ”€â”€ query_retriever.py        # Step 3: Retrieve and answer
â””â”€â”€ README.md                 # This file


## Run Preprocessing
python preprocessing.py
## Create Embeddings and Index
python build_embeddings.py
python build_faiss_index.py
## Start QA Query Loop
python query_retriever.py


questions:
    1. What were the main topics discussed at the engineering synchronization meeting?
    2. What are the rules that apply to working from home?
    3. What are the specific requirements for creating a strong password according to the companys IT security policy?
    4. How many paid vacation days are employees entitled to each year?
    5. Is there a specific deadline for completing the mandatory legal forms?


### 1. Clone the Repository



